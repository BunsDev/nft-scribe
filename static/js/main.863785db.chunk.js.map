{"version":3,"sources":["connectors.js","index.js","hooks.js"],"names":["RPC_URLS","injected","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","4","defaultChainId","pollingInterval","ethers","require","SCRIBE_CONTRACT_ABI","ERC721_CONTRACT_ABI","SCRIBE_CONTRACT_ADDRESS_ROPSTEN","SCRIBE_CONTRACT_ADDRESS_GOERLI","SCRIBE_CONTRACT_ADDRESS_MAINNET","currentTokenAddress","currentTokenId","LoadingState","UNLOADED","LOADING_RECORDS","LOADED","SUBMITTING_DICTATION","getLibrary","provider","library","Web3Provider","MyComponent","context","useWeb3React","connector","chainId","account","activate","React","tokenDocuments","setTokenDocuments","loadingState","setLoadingState","getDictationInput","dictation","document","getElementById","value","trim","length","getScribeContractAddress","getNetworkName","getTokenIDInput","tokenId","parseInt","isNaN","getTokenAddressInput","address","utils","getAddress","e","submitDictation","gasPrice","a","window","alert","console","log","iface","Interface","calldata","functions","dictate","encode","tx","to","data","bigNumberify","signer","getSigner","sendTransaction","then","waitForTransaction","getDefaultProvider","hash","loadToken","getPreviewFromOpenSeaAsset","asset","image_preview_url","resetToUnloadedState","setNFTPreviewData","url","title","tokenAddress","contract","Contract","getDocumentKey","documentKey","documentsCount","numDocuments","toString","documents","i","record","checksumAddress","dictator","lookupAddress","ensName","splice","tokenContract","ownerOf","ownerOfTokenAddress","setIsTokenOwner","isTokenOwner","NFTPreviewData","activatingConnector","setActivatingConnector","undefined","suppress","active","error","useEffect","ethereum","handleNetworkChanged","networkId","handleAccountsChanged","accounts","on","removeListener","useInactiveListener","useState","tried","setTried","isAuthorized","catch","useEagerConnect","className","src","alt","id","placeholder","type","min","defaultValue","disabled","onClick","callback","openseaURL","fetch","crossDomain","method","headers","response","json","previewURL","nftTitle","assets","name","asset_contract","getTitleFromOpenSeaAsset","tokenURI","tokenUri","tokenUriParsed","JSON","parse","ipfs","loadTokenPreview","fast","recordList","forEach","humanReadableTime","timestamp","nowSeconds","Date","getTime","elapsedSeconds","Math","floor","minutes","hours","days","convertTimestampToHumanReadable","creationTime","text","networkName","recordLink","shortName","push","key","href","rel","target","createRecordList","ReactDOM"],"mappings":"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","file":"static/js/main.863785db.chunk.js","sourcesContent":["import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { NetworkConnector } from \"@web3-react/network-connector\";\n\nconst POLLING_INTERVAL = 8000;\nconst RPC_URLS = {\n  1: \"https://mainnet.infura.io/v3/84842078b09946638c03157f83405213\",\n  4: \"https://rinkeby.infura.io/v3/84842078b09946638c03157f83405213\"\n};\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\n\nexport const network = new NetworkConnector({\n  urls: { 1: RPC_URLS[1], 4: RPC_URLS[4] },\n  defaultChainId: 1,\n  pollingInterval: POLLING_INTERVAL\n});","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  // UnsupportedChainIdError\n} from \"@web3-react/core\";\n// import {\n  // NoEthereumProviderError,\n//   UserRejectedRequestError as UserRejectedRequestErrorInjected\n// } from \"@web3-react/injected-connector\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n// import { formatEther } from \"@ethersproject/units\";\nimport './index.css';\n\nimport {\n  injected,\n  // network\n} from \"./connectors\";\n\nimport { useEagerConnect, useInactiveListener } from \"./hooks\";\n\nconst ethers = require('ethers');\n\nconst SCRIBE_CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dictator\",\"type\":\"address\",\"indexed\":false},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"indexed\":false},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"type\":\"event\",\"anonymous\":false,\"name\":\"Record\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"dictate\",\"type\":\"function\",\"constant\":false,\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"documents\",\"type\":\"function\",\"constant\":true,\"outputs\":[{\"internalType\":\"address\",\"name\":\"dictator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"documentsCount\",\"type\":\"function\",\"constant\":true,\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDocumentKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]\nconst ERC721_CONTRACT_ABI = [{ \"constant\": true, \"inputs\": [{ \"name\": \"tokenId\", \"type\": \"uint256\" }], \"name\": \"tokenURI\", \"outputs\": [{ \"name\": \"\", \"type\": \"string\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"_tokenId\", \"type\": \"uint256\" }], \"name\": \"ownerOf\", \"outputs\": [{ \"name\": \"_owner\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }]\n\nconst SCRIBE_CONTRACT_ADDRESS_ROPSTEN = \"0x9831151655180132E6131AB35A82a5e32C149116\" // Ropsten\nconst SCRIBE_CONTRACT_ADDRESS_GOERLI = \"0x284Dc68Afe4b30793acb7507a0Ae029d91bf698e\" // Goerli\nconst SCRIBE_CONTRACT_ADDRESS_MAINNET = \"0xC207efACb12a126D382fA28460BB815F336D845f\" // Mainnet\n\nvar currentTokenAddress = \"\";\nvar currentTokenId = 0;\n\n\nconst LoadingState = {\n    UNLOADED: 0,\n    LOADING_RECORDS: 1,\n    LOADED: 2,\n    SUBMITTING_DICTATION: 3\n}\n\n// function getErrorMessage(error) {\n//   if (error instanceof NoEthereumProviderError) {\n//     return \"No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.\";\n//   } else if (error instanceof UnsupportedChainIdError) {\n//     return \"You're connected to an unsupported network.\";\n//   } else if (\n//     error instanceof UserRejectedRequestErrorInjected\n//   ) {\n//     return \"Please authorize this website to access your Ethereum account.\";\n//   } else {\n//     console.error(error);\n//     return \"An unknown error occurred. Check the console for more details.\";\n//   }\n// }\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 8000;\n  return library;\n}\n\nfunction App() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <MyComponent />\n    </Web3ReactProvider>\n  );\n}\n\nfunction getShortName(recordDictator) {\n  return \"0x33b93...3243\"\n}\n\nfunction MyComponent() {  \n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    // deactivate,\n    // active,\n    // error\n  } = context;\n\n  const [tokenDocuments, setTokenDocuments] = React.useState([]);\n  \n  const [loadingState, setLoadingState] = React.useState(LoadingState.UNLOADED)\n\n  // create a list of record divs\n  function createRecordList() {\n    var recordList = []\n\n    tokenDocuments.forEach(function(record) {\n      var humanReadableTime = convertTimestampToHumanReadable(record.creationTime)\n\n      // TODO automatically insert hyperlinks \n      var dictation = record.text;\n\n      var networkName = getNetworkName(chainId)\n      var recordLink = null;\n\n      if (networkName === \"Mainnet\") {\n        recordLink = \"https://etherscan.io/address/\" + record.dictator;\n      } else {\n        recordLink = \"https://\" + networkName + \".etherscan.io/address/\" + record.dictator;        \n      }\n\n      if (record.ensName === null) {\n        var shortName =  getShortName(record.dictator)\n\n        recordList.push(<div className=\"record-line\" key={dictation + record.creationTime.toString()}>\n          <label className=\"record-line\"><b><a href={recordLink} rel=\"noopener noreferrer\" target=\"_blank\">{shortName}</a></b><span className=\"timestamp\"> • ({humanReadableTime})</span><br/><br/>{dictation}</label>\n        </div>)\n      } else {\n        recordList.push(<div className=\"record-line\" key={record.creationTime.toString()}>\n          <label className=\"record-line\"><b><a href={recordLink} rel=\"noopener noreferrer\" target=\"_blank\">{record.ensName}</a></b><span className=\"timestamp\"> • ({humanReadableTime})</span><br/><br/>{dictation}</label>          \n        </div>)\n      }\n      \n      \n    })\n\n    if (recordList.length === 0) {\n      recordList.push(<label key=\"0\">No records found for this token.</label>)\n    }\n\n    return recordList;\n  }\n\n  // convert a UTC timestamp to something human readable\n  function convertTimestampToHumanReadable(timestamp) {\n    var nowSeconds = new Date().getTime() / 1000;\n    \n    var elapsedSeconds = Math.floor(nowSeconds - timestamp)\n\n    var minutes = Math.floor(elapsedSeconds / 60)\n    var hours = Math.floor(minutes / 60)\n    var days = Math.floor(hours / 24)\n\n    if (days > 0) {\n      if (days === 1) {\n        return days + \" day ago\";\n      } else {\n        return days + \" days ago\";\n      }\n    } else if (hours > 0) {\n      if (hours === 1) {\n        return hours + \" hour ago\";\n      } else {\n        return hours + \" hours ago\";\n      }\n    } else if (minutes > 0) {\n      return minutes + \" min ago\";\n    } else if (elapsedSeconds > 0) {\n      if (elapsedSeconds === 1) {\n        return elapsedSeconds + \" second ago\";\n      } else {\n        return elapsedSeconds + \" seconds ago\";\n      }\n    } else {\n      return \"just recently\"\n    }\n  }\n\n  // get the currently inputted dictation text\n  function getDictationInput() {\n    var dictationField = document.getElementById(\"dictation\")\n\n    var dictation = dictationField.value.trim();\n\n    if (dictation.length === 0) {\n      return null;\n    }\n    return dictation;\n  }\n\n  function getScribeContractAddress(chainId) {\n    if (chainId === 1) {\n      return SCRIBE_CONTRACT_ADDRESS_MAINNET;\n    } else if (chainId === 3) {\n      return SCRIBE_CONTRACT_ADDRESS_ROPSTEN\n    } else if (chainId === 5) {\n      return SCRIBE_CONTRACT_ADDRESS_GOERLI;\n    }\n\n    return \"\"\n  }\n\n  // get the name of the network for a chain id\n  function getNetworkName(chainId) {\n    if (chainId === 1) {\n      return \"Mainnet\"\n    } else if (chainId === 5) {\n      return \"Goerli\"\n    } else {\n      return \"...\"\n    }\n  }\n\n  // Return the currently inputted token id\n  function getTokenIDInput() {\n    var tokenAddressField = document.getElementById(\"tokenId\")\n\n    var tokenId = tokenAddressField.value.trim()\n\n    tokenId = parseInt(tokenId)\n\n    if ((isNaN(tokenId)) || (tokenId < 0)) {\n      return null;    \n    }\n\n    return tokenId;\n  }\n  \n  // Return the currently inputted token address\n  function getTokenAddressInput() {\n    var tokenAddressField = document.getElementById(\"tokenAddress\")\n\n    var address = tokenAddressField.value;\n    \n    try {\n      var checksumAddress = ethers.utils.getAddress(address)\n\n      return checksumAddress;\n    } catch (e) {\n      return null;\n    }    \n  }\n\n  // Retrieve the fast gas price from ETHGasStation\n  function getGasPrice(callback) {\n    fetch(\"https://ethgasstation.info/json/ethgasAPI.json\").then(response => response.json()).then(response => {\n      var gasPrice = response.fast\n\n      // default gas price of 10 if we got an undefined response\n      if (gasPrice === undefined) {\n        gasPrice = 10\n      } else {\n        gasPrice = gasPrice / 10\n      }\n\n      callback(gasPrice)\n    })\n  }\n\n  function checkValidDictation() {\n    var dictation = getDictationInput();\n\n    if (dictation === null) {\n      window.alert(\"Please provide a dictation.\")\n      return false;\n    }\n\n    return true\n  }\n\n  async function submitDictation(gasPrice) {\n    var dictation = getDictationInput();\n\n    if (dictation === null) {\n      window.alert(\"Please provide a dictation.\")\n      return\n    }\n\n    console.log(\"Submitting dictation...\")\n\n    // var provider = ethers.getDefaultProvider(chainId);\n\n    var iface = new ethers.utils.Interface(SCRIBE_CONTRACT_ABI)\n\n    // generate the call data for the dictation\n    var calldata = iface.functions.dictate.encode(\n      [currentTokenAddress, currentTokenId, dictation]\n    )\n\n    const tx = {\n      to: getScribeContractAddress(chainId),\n      data: calldata,      \n      gasPrice: ethers.utils.bigNumberify(gasPrice * 1000000000)\n    }\n\n    var signer = library.getSigner(account);\n\n    // send the transaction\n    try {\n      await signer.sendTransaction(tx).then((tx) => {\n        \n        waitForTransaction(tx)       \n      });\n    } catch (error) {\n      setLoadingState(LoadingState.LOADED)\n    }\n  }\n\n  async function waitForTransaction(tx) {\n    var provider = ethers.getDefaultProvider(chainId);\n\n    await provider.waitForTransaction(tx.hash)\n\n    setLoadingState(LoadingState.LOADING_RECORDS)\n\n    loadToken()\n  }\n\n  function checkValidToken() {\n    var tokenAddress = getTokenAddressInput();\n    \n    if (tokenAddress == null) {\n      window.alert(\"Please provide a valid ERC721 contract address.\")\n      return false\n    }\n\n    var tokenId = getTokenIDInput()\n    if (tokenId == null) {\n      window.alert(\"Please provide a valid ERC721 token ID.\") \n      return false\n    }\n\n    return true;\n  }\n\n  function getTitleFromOpenSeaAsset(asset, tokenId) {\n    if (asset.name === null) {\n      if (asset.asset_contract !== null) {\n        if (asset.asset_contract.name !== null) {\n          return asset.asset_contract.name + \" #\" + tokenId\n        }\n      }\n    } else {\n      return asset.name;\n    }\n  }\n\n  function getPreviewFromOpenSeaAsset(asset) {    \n    if (asset.image_preview_url === null) {\n      return \"\"; \n    }    \n\n    return asset.image_preview_url;\n  }\n\n  function loadTokenPreview(callback) {  \n    // reset preview and title\n    setNFTPreviewData({\n    \turl : \"\",\n    \ttitle : \"\"\n    })\n\n    var tokenId = getTokenIDInput();\n    var tokenAddress = getTokenAddressInput();\n\n\n    // TODO insert developer API Key\n    var openseaURL = \"https://api.opensea.io/api/v1/assets?token_ids=\" + tokenId + \"&asset_contract_address=\" + tokenAddress;\n\n    console.log(openseaURL)\n                        \n    fetch(openseaURL, {\n      crossDomain:true,\n      method: 'POST',\n      headers: {'Content-Type':'application/json'},      \n    }).then(response => response.json()).then(response => {\n    \tvar previewURL = \"\";\n    \tvar nftTitle = \"\";\n\n\t\tconsole.log(response)\n\n\t\tif (response.assets.length > 0) {        \n\t\t\tif (getPreviewFromOpenSeaAsset(response.assets[0]).length !== 0) {\n\t\t\t\tpreviewURL = getPreviewFromOpenSeaAsset(response.assets[0]);\n\t\t\t}\n\n\t\t\tnftTitle = getTitleFromOpenSeaAsset(response.assets[0], tokenId);\n\t\t} else {\n\t\t\tpreviewURL = \"image-not-found.png\";\n\t\t\tnftTitle = \"n/a\"\t\t\t\n\t\t}\n\n\t\tsetNFTPreviewData({\n\t\t\turl : previewURL,\n\t\t\ttitle : nftTitle\n\t\t})\n\n\t\tcallback().catch(error => {\n\t\t  window.alert(error)\n\n\t\t  resetToUnloadedState();\n\t\t});\n\n\t\t  // Get the details from the token URI\n\t\tvar tokenContract = new ethers.Contract(tokenAddress, ERC721_CONTRACT_ABI, ethers.getDefaultProvider(chainId))\n\n\t\ttokenContract.tokenURI(tokenId).then(tokenUri => {\n\t\t  try {\n\t\t    let tokenUriParsed = JSON.parse(tokenUri)\n\n\t\t    if (!!tokenUriParsed.ipfs) {\n\t\t    \tvar currentTitle = NFTPreviewData.title;\n\t\t    \t\n\t\t      \tsetNFTPreviewData({\n\t\t  \t\t\turl : \"https://ipfs.infura.io/ipfs/\" + tokenUriParsed.ipfs,\n\t\t  \t\t\ttitle : nftTitle\n\t\t  \t\t})\n\t\t    }        \n\t\t  } catch (e) {\n\t\t    // ignore error, many tokens will error since not a json object\n\t\t  }\n\t\t}).catch((e) => {\n\t\t  // ignore error, any token that doesn't have the `tokenURI` function will fail here.\n\t\t})\n    }).catch(error => {      \n      window.alert(error)\n\n      resetToUnloadedState();\n    })\n  }\n\n  function resetToUnloadedState() {\n    // reset preview and title\n    setNFTPreviewData({\n\t\turl : \"\",\n\t\ttitle : \"\"\n\t})\n\n    setLoadingState(LoadingState.UNLOADED)\n  }\n\n  async function loadToken() {\n    var tokenAddress = getTokenAddressInput();\n    var tokenId = getTokenIDInput()    \n\n    var provider = ethers.getDefaultProvider(chainId)\n    \n    var contract = new ethers.Contract(getScribeContractAddress(chainId), SCRIBE_CONTRACT_ABI, provider)\n\n    var documentKey = await contract.getDocumentKey(tokenAddress, tokenId)\n\n    var numDocuments = (await contract.documentsCount(documentKey)).toString()\n\n    var documents = []\n\n    // TODO cache ENS names to avoid repeats    \n    for (var i = 0; i < numDocuments; i++) {      \n      var record = await contract.documents(documentKey, i)\n      \n      // look up if there's an ENS name for this address\n      var checksumAddress = ethers.utils.getAddress(record.dictator)\n\n      record.ensName = await provider.lookupAddress(checksumAddress)\n\n      documents.splice(0, 0, record)      \n    }\n\n    currentTokenAddress = tokenAddress;\n    currentTokenId = tokenId;    \n\n    setTokenDocuments(documents)\n\n    // check if we're the owner of this token\n    var tokenContract = new ethers.Contract(currentTokenAddress, ERC721_CONTRACT_ABI, provider)\n\n    var ownerOfTokenAddress = await tokenContract.ownerOf(currentTokenId)\n    \n    setIsTokenOwner(account === ownerOfTokenAddress)\n\n    setLoadingState(LoadingState.LOADED)\n  }\n\n  const [isTokenOwner, setIsTokenOwner] = React.useState(false);\n  \n  const [NFTPreviewData, setNFTPreviewData] = React.useState({\n  \turl : \"\",\n  \ttitle : \"\",\n  });\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  return (\n    <div>\n      <div className=\"padded-div\">\n        <label><i>NFT Scribe</i> is a smart contract that allows ERC721 owners to append onchain messages and annotations to their tokens.</label>\n      </div>\n      <hr/>\n        <div className=\"center-header-images-container\">\n          <div className=\"inner-header-images\">\n            <img className=\"hero-image\" src=\"scribe.gif\" alt=\"Scribe\"/>\n            \n            {(NFTPreviewData.url.length === 0) && (<img className=\"nft-outline\" alt=\"Outline\" src=\"nft_outline.png\"/>)}\n\n            {(NFTPreviewData.url.length !== 0) && (<img alt=\"Token\" className=\"nft-overlay\" src={NFTPreviewData.url}/>)}\n\n            {(NFTPreviewData.title.length !== 0) && (<label className=\"nft-overlay\" >{NFTPreviewData.title}</label>)}\n\n            {\n              ((loadingState === LoadingState.LOADING_RECORDS) || (loadingState === LoadingState.SUBMITTING_DICTATION))\n              && (<img alt=\"Spinner\" className=\"loading-spinner\" src=\"loading.gif\"/>)\n            }\n            \n\n          </div>\n          </div>\n        <br/>\n          <div>\n            <div className=\"main-section\">\n                <label><b>Token Address</b></label>\n                  <input id=\"tokenAddress\" placeholder=\"0x...\"/>\n              \n                <label><b>Token ID</b></label>\n                  <input id=\"tokenId\" type=\"number\" placeholder=\"0, 1, 2, 3...\" min=\"0\" defaultValue=\"0\"/>\n            \n              <div className=\"button-container\">\n                {!!(library && account) && (\n                  <button disabled={(loadingState === LoadingState.LOADING_RECORDS)}  className=\"load-erc\" onClick={() => {\n                      if (checkValidToken()) {\n                        setLoadingState(LoadingState.LOADING_RECORDS)\n\n                        loadTokenPreview(loadToken)                        \n                      }\n                    }}\n                  ><b>Load ERC721</b></button>\n                )}\n                {\n                  (!!(library) === false) && (\n                    <button className=\"connect-web3\"  onClick={() => {\n                      setActivatingConnector(injected);\n                      activate(injected);\n                    }}\n                  >Connect to Web3</button>                  \n                  )\n                }\n              </div>       \n\n\n              {\n                (loadingState !== LoadingState.UNLOADED) && (loadingState !== LoadingState.LOADING_RECORDS) && (isTokenOwner) &&\n                  (<div>\n                    <label><b>Dictation</b></label>                   \n                    <input disabled={(loadingState === LoadingState.SUBMITTING_DICTATION)} id=\"dictation\" placeholder=\"Let it be known...\"/>\n                    <div className=\"button-container\">\n                    \n                      <button disabled={(loadingState === LoadingState.SUBMITTING_DICTATION)} className=\"submit-dictation\" onClick={() => {\n                        if (checkValidDictation()) {\n                          setLoadingState(LoadingState.SUBMITTING_DICTATION)\n\n                          getGasPrice(submitDictation)\n                        }                        \n                      }}><b>Submit Dictation</b></button>\n\n                    </div>\n                  </div>\n                )\n              }\n\n              {\n                ((loadingState === LoadingState.LOADED) || (loadingState === LoadingState.SUBMITTING_DICTATION)) && createRecordList()\n              }\n            </div>        \n          </div>\n      <hr/>\n        <div className=\"padded-div\">\n          <label>Version 1.0.2 | <b><a href=\"https://github.com/conlan/nft-scribe\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></b> | <b><a href=\"https://etherscan.io/address/0xC207efACb12a126D382fA28460BB815F336D845f\" target=\"_blank\" rel=\"noopener noreferrer\">Contract</a></b> | <b><a href=\"https://twitter.com/conlan\" target=\"_blank\" rel=\"noopener noreferrer\">@Conlan</a></b> | </label>\n          \n          <label>⛓{getNetworkName(chainId)}</label>     \n          <br/>\n          <label>Please use at your own risk and double check <a href=\"https://ethgasstation.info/\" target=\"_blank\" rel=\"noopener noreferrer\">gas price</a> before submitting transaction ⛽</label>     \n        </div>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// Loading gif https://giphy.com/stickers/geometric-heysp-illustrated-geometry-c6XT7hN1iSuUoNxD1b","import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"./connectors\";\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && !active && !error && !suppress) {\n      const handleNetworkChanged = networkId => {\n        console.log(\"networkChanged\", networkId);\n        activate(injected);\n      };\n      const handleAccountsChanged = accounts => {\n        console.log(\"accountsChanged\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n\n      return () => {\n        ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n}\n"],"sourceRoot":""}