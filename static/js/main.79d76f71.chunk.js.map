{"version":3,"sources":["connectors.js","index.js","hooks.js"],"names":["RPC_URLS","injected","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","4","defaultChainId","pollingInterval","ethers","require","SCRIBE_CONTRACT_ABI","ERC721_CONTRACT_ABI","SCRIBE_CONTRACT_ADDRESS_ROPSTEN","SCRIBE_CONTRACT_ADDRESS_GOERLI","SCRIBE_CONTRACT_ADDRESS_MAINNET","currentTokenAddress","currentTokenId","didCheckForURLParams","isWaitingForValidChainToAutoload","LoadingState","UNLOADED","LOADING_RECORDS","LOADED","SUBMITTING_DICTATION","getLibrary","provider","library","Web3Provider","MyComponent","props","context","useWeb3React","connector","chainId","account","activate","React","tokenDocuments","setTokenDocuments","loadingState","setLoadingState","getDictationInput","dictation","document","getElementById","value","trim","length","getScribeContractAddress","getNetworkName","cleanTokenInput","tokenIdCandidate","tokenId","parseInt","isNaN","getTokenIDInput","cleanAddressInput","tokenAddressCandidate","utils","getAddress","e","getTokenAddressInput","submitDictation","gasPrice","a","window","alert","console","log","iface","Interface","calldata","functions","dictate","encode","tx","to","data","bigNumberify","signer","getSigner","sendTransaction","then","waitForTransaction","getDefaultProvider","hash","loadToken","checkValidToken","getPreviewFromOpenSeaAsset","asset","image_preview_url","resetToUnloadedState","setNFTPreviewData","url","title","generateShareLink","onCopyLinkClicked","textField","createElement","innerText","body","appendChild","select","execCommand","remove","copyToClipboard","src","onLoadTokenClicked","callback","tokenAddress","openseaURL","fetch","crossDomain","method","headers","response","json","previewURL","nftTitle","assets","name","asset_contract","getTitleFromOpenSeaAsset","catch","error","Contract","tokenURI","tokenUri","tokenUriParsed","JSON","parse","ipfs","loadTokenPreview","contract","getDocumentKey","documentKey","documentsCount","numDocuments","toString","documents","i","record","checksumAddress","dictator","lookupAddress","ensName","splice","tokenContract","ownerOf","ownerOfTokenAddress","setIsTokenOwner","isTokenOwner","NFTPreviewData","activatingConnector","setActivatingConnector","undefined","suppress","active","useEffect","ethereum","handleNetworkChanged","networkId","handleAccountsChanged","accounts","on","removeListener","useInactiveListener","useState","tried","setTried","isAuthorized","useEagerConnect","urlParams","URLSearchParams","location","search","autoLoadAddress","autoLoadId","has","addressInput","get","idInput","requestAnimationFrame","className","alt","id","onClick","shareLink","tokenName","substring","twitterUserForContract","toLowerCase","tweetText","tweetURL","replace","open","onTweetLinkClicked","placeholder","type","min","defaultValue","disabled","fast","recordList","forEach","recordDictator","humanReadableTime","timestamp","nowSeconds","Date","getTime","elapsedSeconds","Math","floor","minutes","hours","days","convertTimestampToHumanReadable","creationTime","text","networkName","recordLink","shortName","maxLength","push","key","href","rel","target","createRecordList","ReactDOM"],"mappings":"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","file":"static/js/main.79d76f71.chunk.js","sourcesContent":["import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { NetworkConnector } from \"@web3-react/network-connector\";\n\nconst POLLING_INTERVAL = 8000;\nconst RPC_URLS = {\n  1: \"https://mainnet.infura.io/v3/84842078b09946638c03157f83405213\",\n  4: \"https://rinkeby.infura.io/v3/84842078b09946638c03157f83405213\"\n};\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\n\nexport const network = new NetworkConnector({\n  urls: { 1: RPC_URLS[1], 4: RPC_URLS[4] },\n  defaultChainId: 1,\n  pollingInterval: POLLING_INTERVAL\n});","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  // UnsupportedChainIdError\n} from \"@web3-react/core\";\n// import {\n  // NoEthereumProviderError,\n//   UserRejectedRequestError as UserRejectedRequestErrorInjected\n// } from \"@web3-react/injected-connector\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n// import { formatEther } from \"@ethersproject/units\";\nimport './index.css';\n\nimport {\n  injected,\n  // network\n} from \"./connectors\";\n\nimport { useEagerConnect, useInactiveListener } from \"./hooks\";\n\nconst ethers = require('ethers');\n\nconst SCRIBE_CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dictator\",\"type\":\"address\",\"indexed\":false},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"indexed\":false},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"type\":\"event\",\"anonymous\":false,\"name\":\"Record\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"dictate\",\"type\":\"function\",\"constant\":false,\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"documents\",\"type\":\"function\",\"constant\":true,\"outputs\":[{\"internalType\":\"address\",\"name\":\"dictator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"documentsCount\",\"type\":\"function\",\"constant\":true,\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDocumentKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]\nconst ERC721_CONTRACT_ABI = [{ \"constant\": true, \"inputs\": [{ \"name\": \"tokenId\", \"type\": \"uint256\" }], \"name\": \"tokenURI\", \"outputs\": [{ \"name\": \"\", \"type\": \"string\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"_tokenId\", \"type\": \"uint256\" }], \"name\": \"ownerOf\", \"outputs\": [{ \"name\": \"_owner\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }]\n\nconst SCRIBE_CONTRACT_ADDRESS_ROPSTEN = \"0x9831151655180132E6131AB35A82a5e32C149116\" // Ropsten\nconst SCRIBE_CONTRACT_ADDRESS_GOERLI = \"0x284Dc68Afe4b30793acb7507a0Ae029d91bf698e\" // Goerli\nconst SCRIBE_CONTRACT_ADDRESS_MAINNET = \"0xC207efACb12a126D382fA28460BB815F336D845f\" // Mainnet\n\nvar currentTokenAddress = \"\";\nvar currentTokenId = 0;\n\nvar didCheckForURLParams = false;\nvar isWaitingForValidChainToAutoload = false;\n\nconst LoadingState = {\n    UNLOADED: 0,\n    LOADING_RECORDS: 1,\n    LOADED: 2,\n    SUBMITTING_DICTATION: 3\n}\n\n// function getErrorMessage(error) {\n//   if (error instanceof NoEthereumProviderError) {\n//     return \"No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.\";\n//   } else if (error instanceof UnsupportedChainIdError) {\n//     return \"You're connected to an unsupported network.\";\n//   } else if (\n//     error instanceof UserRejectedRequestErrorInjected\n//   ) {\n//     return \"Please authorize this website to access your Ethereum account.\";\n//   } else {\n//     console.error(error);\n//     return \"An unknown error occurred. Check the console for more details.\";\n//   }\n// }\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 8000;\n  return library;\n}\n\nfunction App() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <MyComponent />\n    </Web3ReactProvider>\n  );\n}\n\nfunction getShortName(recordDictator) {\n  var maxLength = 20;  \n\n  if (recordDictator.length > maxLength) {\n    recordDictator = recordDictator.substring(0, maxLength / 2) + \"...\" + \n      recordDictator.substring(recordDictator.length - (maxLength /2), recordDictator.length)\n  }\n\n  return recordDictator;\n}\n\nfunction MyComponent(props) {  \n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    // deactivate,\n    // active,\n    // error\n  } = context;\n\n  const [tokenDocuments, setTokenDocuments] = React.useState([]);\n  \n  const [loadingState, setLoadingState] = React.useState(LoadingState.UNLOADED)\n\n  // create a list of record divs\n  function createRecordList() {\n    var recordList = []\n\n    tokenDocuments.forEach(function(record) {\n      var humanReadableTime = convertTimestampToHumanReadable(record.creationTime)\n\n      // TODO automatically insert hyperlinks \n      var dictation = record.text;\n\n      var networkName = getNetworkName(chainId)\n      var recordLink = null;\n\n      if (networkName === \"Mainnet\") {\n        recordLink = \"https://etherscan.io/address/\" + record.dictator;\n      } else {\n        recordLink = \"https://\" + networkName + \".etherscan.io/address/\" + record.dictator;        \n      }\n\n      if (record.ensName === null) {\n        var shortName =  getShortName(record.dictator)\n\n        recordList.push(<div className=\"record-line\" key={dictation + record.creationTime.toString()}>\n          <label className=\"record-line\"><b><a href={recordLink} rel=\"noopener noreferrer\" target=\"_blank\">{shortName}</a></b><span className=\"timestamp\"> • ({humanReadableTime})</span><br/><br/>{dictation}</label>\n        </div>)\n      } else {\n        recordList.push(<div className=\"record-line\" key={record.creationTime.toString()}>\n          <label className=\"record-line\"><b><a href={recordLink} rel=\"noopener noreferrer\" target=\"_blank\">{record.ensName}</a></b><span className=\"timestamp\"> • ({humanReadableTime})</span><br/><br/>{dictation}</label>          \n        </div>)\n      }\n      \n      \n    })\n\n    if (recordList.length === 0) {\n      recordList.push(<label key=\"0\">No records found for this token.</label>)\n    }\n\n    return recordList;\n  }\n\n  // convert a UTC timestamp to something human readable\n  function convertTimestampToHumanReadable(timestamp) {\n    var nowSeconds = new Date().getTime() / 1000;\n    \n    var elapsedSeconds = Math.floor(nowSeconds - timestamp)\n\n    var minutes = Math.floor(elapsedSeconds / 60)\n    var hours = Math.floor(minutes / 60)\n    var days = Math.floor(hours / 24)\n\n    if (days > 0) {\n      if (days === 1) {\n        return days + \" day ago\";\n      } else {\n        return days + \" days ago\";\n      }\n    } else if (hours > 0) {\n      if (hours === 1) {\n        return hours + \" hour ago\";\n      } else {\n        return hours + \" hours ago\";\n      }\n    } else if (minutes > 0) {\n      return minutes + \" min ago\";\n    } else if (elapsedSeconds > 0) {\n      if (elapsedSeconds === 1) {\n        return elapsedSeconds + \" second ago\";\n      } else {\n        return elapsedSeconds + \" seconds ago\";\n      }\n    } else {\n      return \"just recently\"\n    }\n  }\n\n  // get the currently inputted dictation text\n  function getDictationInput() {\n    var dictationField = document.getElementById(\"dictation\")\n\n    var dictation = dictationField.value.trim();\n\n    if (dictation.length === 0) {\n      return null;\n    }\n    return dictation;\n  }\n\n  function getScribeContractAddress(chainId) {\n    if (chainId === 1) {\n      return SCRIBE_CONTRACT_ADDRESS_MAINNET;\n    } else if (chainId === 3) {\n      return SCRIBE_CONTRACT_ADDRESS_ROPSTEN\n    } else if (chainId === 5) {\n      return SCRIBE_CONTRACT_ADDRESS_GOERLI;\n    }\n\n    return \"\"\n  }\n\n  // get the name of the network for a chain id\n  function getNetworkName(chainId) {\n    if (chainId === 1) {\n      return \"Mainnet\"\n    } else if (chainId === 5) {\n      return \"Goerli\"\n    } else {\n      return \"...\"\n    }\n  }\n\n  function cleanTokenInput(tokenIdCandidate) {\n    var tokenId = parseInt(tokenIdCandidate)\n\n    if ((isNaN(tokenId)) || (tokenId < 0)) {\n      return null;    \n    }\n\n    return tokenId;\n  }\n\n  // Return the currently inputted token id\n  function getTokenIDInput() {\n    var tokenAddressField = document.getElementById(\"tokenId\")\n\n    var tokenId = tokenAddressField.value.trim()\n\n    return cleanTokenInput(tokenId)\n  }\n\n  function cleanAddressInput(tokenAddressCandidate) {\n    try {\n      var checksumAddress = ethers.utils.getAddress(tokenAddressCandidate)\n\n      return checksumAddress;\n    } catch (e) {\n      return null;\n    } \n  }\n  \n  // Return the currently inputted token address\n  function getTokenAddressInput() {    \n    var tokenAddressField = document.getElementById(\"tokenAddress\")\n\n    var address = tokenAddressField.value;\n\n    return cleanAddressInput(address)  \n  }\n\n  // Retrieve the fast gas price from ETHGasStation\n  function getGasPrice(callback) {\n    fetch(\"https://ethgasstation.info/json/ethgasAPI.json\").then(response => response.json()).then(response => {\n      var gasPrice = response.fast\n\n      // default gas price of 10 if we got an undefined response\n      if (gasPrice === undefined) {\n        gasPrice = 10\n      } else {\n        gasPrice = gasPrice / 10\n      }\n\n      callback(gasPrice)\n    })\n  }\n\n  function checkValidDictation() {\n    var dictation = getDictationInput();\n\n    if (dictation === null) {\n      window.alert(\"Please provide a dictation.\")\n      return false;\n    }\n\n    return true\n  }\n\n  async function submitDictation(gasPrice) {\n    var dictation = getDictationInput();\n\n    if (dictation === null) {\n      window.alert(\"Please provide a dictation.\")\n      return\n    }\n\n    console.log(\"Submitting dictation...\")\n\n    // var provider = ethers.getDefaultProvider(chainId);\n\n    var iface = new ethers.utils.Interface(SCRIBE_CONTRACT_ABI)\n\n    // generate the call data for the dictation\n    var calldata = iface.functions.dictate.encode(\n      [currentTokenAddress, currentTokenId, dictation]\n    )\n\n    const tx = {\n      to: getScribeContractAddress(chainId),\n      data: calldata,      \n      gasPrice: ethers.utils.bigNumberify(gasPrice * 1000000000)\n    }\n\n    var signer = library.getSigner(account);\n\n    // send the transaction\n    try {\n      await signer.sendTransaction(tx).then((tx) => {\n        \n        waitForTransaction(tx)       \n      });\n    } catch (error) {\n      setLoadingState(LoadingState.LOADED)\n    }\n  }\n\n  async function waitForTransaction(tx) {\n    var provider = ethers.getDefaultProvider(chainId);\n\n    await provider.waitForTransaction(tx.hash)\n\n    setLoadingState(LoadingState.LOADING_RECORDS)\n\n    loadToken()\n  }\n\n  function checkValidToken() {\n    var tokenAddress = getTokenAddressInput();\n    \n    if (tokenAddress == null) {\n      window.alert(\"Please provide a valid ERC721 contract address.\")\n      return false\n    }\n\n    var tokenId = getTokenIDInput()\n    if (tokenId == null) {\n      window.alert(\"Please provide a valid ERC721 token ID.\") \n      return false\n    }\n\n    return true;\n  }\n\n  function getTitleFromOpenSeaAsset(asset, tokenId) {\n    if (asset.name === null) {\n      if (asset.asset_contract !== null) {\n        if (asset.asset_contract.name !== null) {\n          return asset.asset_contract.name + \" #\" + tokenId\n        }\n      }\n    } else {\n      return asset.name;\n    }\n  }\n\n  function getPreviewFromOpenSeaAsset(asset) {    \n    if (asset.image_preview_url === null) {\n      return \"\"; \n    }    \n\n    return asset.image_preview_url;\n  }\n\n  function loadTokenPreview(callback) {  \n    // reset preview and title\n    setNFTPreviewData({\n    \turl : \"\",\n    \ttitle : \"\"\n    })\n\n    var tokenId = getTokenIDInput();\n    var tokenAddress = getTokenAddressInput();\n\n\n    // TODO insert developer API Key\n    var openseaURL = \"https://api.opensea.io/api/v1/assets?token_ids=\" + tokenId + \"&asset_contract_address=\" + tokenAddress;\n\n    console.log(openseaURL)\n                        \n    fetch(openseaURL, {\n      crossDomain:true,\n      method: 'POST',\n      headers: {'Content-Type':'application/json'},      \n    }).then(response => response.json()).then(response => {\n    \tvar previewURL = \"\";\n    \tvar nftTitle = \"\";\n\n\t\t  console.log(response)\n\n  \t\tif (response.assets.length > 0) {        \n  \t\t\tif (getPreviewFromOpenSeaAsset(response.assets[0]).length !== 0) {\n  \t\t\t\tpreviewURL = getPreviewFromOpenSeaAsset(response.assets[0]);\n  \t\t\t}\n\n  \t\t\tnftTitle = getTitleFromOpenSeaAsset(response.assets[0], tokenId);\n  \t\t} else {\n  \t\t\tpreviewURL = \"image-not-found.png\";\n  \t\t\tnftTitle = \"n/a\"\t\t\t\n  \t\t}\n\n  \t\tsetNFTPreviewData({\n  \t\t\turl : previewURL,\n  \t\t\ttitle : nftTitle\n  \t\t})\n\n  \t\tcallback().catch(error => {\n  \t\t  window.alert(error)\n\n  \t\t  resetToUnloadedState();\n  \t\t});\n\n\t\t  // Get the details from the token URI\n\t \t var tokenContract = new ethers.Contract(tokenAddress, ERC721_CONTRACT_ABI, ethers.getDefaultProvider(chainId))\n\n  \t\ttokenContract.tokenURI(tokenId).then(tokenUri => {\n  \t\t  try {\n  \t\t    let tokenUriParsed = JSON.parse(tokenUri)\n\n  \t\t    if (!!tokenUriParsed.ipfs) {\n  \t\t    \tsetNFTPreviewData({\n  \t  \t\t  \turl : \"https://ipfs.infura.io/ipfs/\" + tokenUriParsed.ipfs,\n  \t\t  \t\t\ttitle : nftTitle\n  \t\t  \t\t})\n  \t\t    }        \n  \t\t  } catch (e) {\n  \t\t    // ignore error, many tokens will error since not a json object\n  \t\t  }\n  \t\t}).catch((e) => {\n  \t\t  // ignore error, any token that doesn't have the `tokenURI` function will fail here.\n  \t\t})\n      }).catch(error => {      \n        window.alert(error)\n\n        resetToUnloadedState();\n    })\n  }\n\n  function resetToUnloadedState() {\n    // reset preview and title\n    setNFTPreviewData({\n\t\turl : \"\",\n\t\ttitle : \"\"\n\t})\n\n    setLoadingState(LoadingState.UNLOADED)\n  }\n\n  function generateShareLink() {\n      var tokenId = getTokenIDInput();\n      var tokenAddress = getTokenAddressInput();\n\n      return \"https://conlan.github.io/nft-scribe/?address=\" + tokenAddress + \"&id=\" + tokenId;\n  }\n\n  function getTwitterUserForContract(tokenAddress) {\n  \ttokenAddress = tokenAddress.toLowerCase();\n\n  \t// TODO put these in a file somewhere\n  \tif ((tokenAddress === \"0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0\".toLowerCase()) ||\n  \t\t(tokenAddress === \"0x41A322b28D0fF354040e2CbC676F0320d8c8850d\".toLowerCase())) {\n  \t\treturn \"SuperRare_co\";\n  \t} else if (tokenAddress === \"0x1d963688FE2209A98dB35C67A041524822Cf04ff\".toLowerCase()) {\n  \t\treturn \"marble_cards\";\n  \t} else if (tokenAddress === \"0x2a46f2ffd99e19a89476e2f62270e0a35bbf0756\".toLowerCase()) {\n  \t\treturn \"makersplaceco\";\n  \t} else if (tokenAddress === \"0xfbeef911dc5821886e1dda71586d90ed28174b7d\".toLowerCase()) {\n  \t\treturn \"KnownOrigin_io\";\n  \t} else if (tokenAddress === \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\".toLowerCase()) {\n  \t\treturn \"CryptoKitties\";\n  \t} else if (tokenAddress === \"0x6aD0f855c97eb80665F2D0C7d8204895e052C373\".toLowerCase()) {\n  \t\treturn \"wildcards_world\";\n  \t} else if (tokenAddress === \"0x6aD0f855c97eb80665F2D0C7d8204895e052C373\".toLowerCase()) {\n  \t\treturn \"wildcards_world\";\n  \t} else if (tokenAddress === \"0x102C527714AB7e652630cAc7a30Abb482B041Fd0\".toLowerCase()) {\n  \t\treturn \"CryptoKaijuIO\";\n  \t} else if (tokenAddress === \"0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab\".toLowerCase()) {\n  \t\treturn \"GodsUnchained\";\n  \t} else if (tokenAddress === \"0x79986aF15539de2db9A5086382daEdA917A9CF0C\".toLowerCase()) {\n  \t\treturn \"Cryptovoxels\";\n  \t}\n\n  \treturn null;\n  }\n\n  function onTweetLinkClicked() {\n  \tif (checkValidToken()) {\n  \t\tvar shareLink = generateShareLink();\n\n  \t\tvar tokenName = NFTPreviewData.title;\n\n  \t\t// trim name down and add elipsis if too long\n  \t\tlet MAX_TOKEN_NAME_LENGTH = 50;\n\n  \t\tif (tokenName.length > MAX_TOKEN_NAME_LENGTH) {\n  \t\t\ttokenName = tokenName.substring(0, MAX_TOKEN_NAME_LENGTH) + \"...\"\n  \t\t}\n\n  \t\t// detect which contract we're using and append tweet names if found\n  \t\tvar twitterUserForContract = getTwitterUserForContract(getTokenAddressInput())\n\n  \t\tvar tweetText = \"See scribed messages for \\\"\" + tokenName + \"\\\" \";\n\n  \t\tif (twitterUserForContract !== null) {\n  \t\t\ttweetText += \"(@\" + twitterUserForContract + \") \";\n  \t\t}\n\n  \t\tshareLink = shareLink.replace(\"&\", \"%26\") // replace the ampersand with URL escape\n\n  \t\ttweetText += \"at \" + shareLink;\n\n  \t\ttweetText = tweetText.replace(\"#\", \"\") // remove the hashtag since on twitter it means a linkable tag\n  \t\n  \t\tvar tweetURL = \"https://twitter.com/intent/tweet?text=\" + tweetText + \"&hashtags=NFT\"\n\n  \t\twindow.open(tweetURL)\n  \t\t\n  \t}\n  }\n\n  function onCopyLinkClicked() {\n    if (checkValidToken()) {\n      var shareLink = generateShareLink();\n\n      copyToClipboard(shareLink);\n\n      // check the share button source to copied\n      document.getElementById(\"share-button\").src=\"copy-complete.png\";      \n    }\n  }\n\n  function copyToClipboard(e) {\n    var textField = document.createElement('textarea')\n    \n    textField.innerText = e;\n    document.body.appendChild(textField)\n    textField.select()\n    document.execCommand('copy')\n    textField.remove()\n  };\n\n  function onLoadTokenClicked() {\n    if (checkValidToken()) {\n      setLoadingState(LoadingState.LOADING_RECORDS)\n\n      loadTokenPreview(loadToken)                        \n    }\n  }\n\n  async function loadToken() {\n    var tokenAddress = getTokenAddressInput();\n    var tokenId = getTokenIDInput()    \n\n    var provider = ethers.getDefaultProvider(chainId)\n    \n    var contract = new ethers.Contract(getScribeContractAddress(chainId), SCRIBE_CONTRACT_ABI, provider)\n\n    var documentKey = await contract.getDocumentKey(tokenAddress, tokenId)\n\n    var numDocuments = (await contract.documentsCount(documentKey)).toString()\n\n    var documents = []\n\n    // TODO cache ENS names to avoid repeats    \n    for (var i = 0; i < numDocuments; i++) {      \n      var record = await contract.documents(documentKey, i)\n      \n      // look up if there's an ENS name for this address\n      var checksumAddress = ethers.utils.getAddress(record.dictator)\n\n      record.ensName = await provider.lookupAddress(checksumAddress)\n\n      documents.splice(0, 0, record)      \n    }\n\n    currentTokenAddress = tokenAddress;\n    currentTokenId = tokenId;    \n\n    setTokenDocuments(documents)\n\n    // check if we're the owner of this token\n    var tokenContract = new ethers.Contract(currentTokenAddress, ERC721_CONTRACT_ABI, provider)\n\n    var ownerOfTokenAddress = await tokenContract.ownerOf(currentTokenId)\n    \n    setIsTokenOwner(account === ownerOfTokenAddress)\n\n    setLoadingState(LoadingState.LOADED)\n  }\n\n  const [isTokenOwner, setIsTokenOwner] = React.useState(false);\n  \n  const [NFTPreviewData, setNFTPreviewData] = React.useState({\n  \turl : \"\",\n  \ttitle : \"\",\n  });\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  // check if a token address + token ID were put into the URL\n  if (didCheckForURLParams === false) {\n    didCheckForURLParams = true;\n\n    try {\n      // check for URL Search Params support\n      if (\"URLSearchParams\" in window) {\n        // extract token address from URL if found\n        var urlParams = new URLSearchParams(window.location.search);\n\n        var autoLoadAddress = null;\n        var autoLoadId = null;\n\n        if (urlParams.has(\"address\")) {\n          var addressInput = urlParams.get(\"address\");\n          \n          // validate the address input before assuming it's a valid address\n          autoLoadAddress = cleanAddressInput(addressInput)\n        }\n\n        if (urlParams.has(\"id\")) {\n          var idInput = urlParams.get(\"id\");\n\n          // validate the id before assuming it's a valid id\n          autoLoadId = cleanTokenInput(idInput)\n        }\n      }\n\n      // check if we received some parameters in the URL\n      if ((autoLoadAddress !== null) && (autoLoadId !== null)) {\n        console.log(\"found valid address + id, loading token...\")\n\n        window.requestAnimationFrame(function() {  \n          document.getElementById(\"tokenAddress\").value = autoLoadAddress;\n\n          document.getElementById(\"tokenId\").value = autoLoadId;\n\n          isWaitingForValidChainToAutoload = true;          \n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  if (isWaitingForValidChainToAutoload) {\n    if (getScribeContractAddress(chainId).length > 0) {\n      isWaitingForValidChainToAutoload = false;\n\n      onLoadTokenClicked()\n    }\n  } \n\n  return (\n    <div>\n      <div className=\"padded-div\">\n        <label><i>NFT Scribe</i> is a smart contract that allows ERC721 owners to append onchain messages and annotations to their tokens.</label>\n      </div>\n      <hr/>\n        <div className=\"center-header-images-container\">\n          <div className=\"inner-header-images\">\n            <img className=\"hero-image\" src=\"scribe.gif\" alt=\"Scribe\"/>\n            \n            {(NFTPreviewData.url.length === 0) && (<img className=\"nft-outline\" alt=\"Outline\" src=\"nft_outline.png\"/>)}\n\n            {(NFTPreviewData.url.length !== 0) && (<img alt=\"Token\" className=\"nft-overlay\" src={NFTPreviewData.url}/>)}\n\n            {(NFTPreviewData.title.length !== 0) && (<label className=\"nft-overlay\" >{NFTPreviewData.title}</label>)}\n\n            {\n              ((loadingState === LoadingState.LOADING_RECORDS) || (loadingState === LoadingState.SUBMITTING_DICTATION))\n              && (<img alt=\"Spinner\" className=\"loading-spinner\" src=\"loading.gif\"/>)\n            }\n\n            {\n              (loadingState === LoadingState.LOADED) &&\n              (<img alt=\"Copy\" id=\"share-button\" className=\"share-button\" src=\"copy.png\" onClick={() => {\n                  onCopyLinkClicked();                  \n              }}/>)\n            }\n\n            {\n              (loadingState === LoadingState.LOADED) &&\n              (<img alt=\"Copy\" className=\"tweet-button\" src=\"tweet.png\" onClick={() => {\n\t\t\t\tonTweetLinkClicked()\n              }}/>)\n            }\n            \n\n          </div>\n          </div>\n        <br/>\n          <div>\n            <div className=\"main-section\">\n                <label><b>Token Address</b></label>\n                  <input id=\"tokenAddress\" placeholder=\"0x...\"/>\n              \n                <label><b>Token ID</b></label>\n                  <input id=\"tokenId\" type=\"number\" placeholder=\"0, 1, 2, 3...\" min=\"0\" defaultValue=\"0\"/>\n            \n              <div className=\"button-container\">\n                {!!(library && account) && (\n                  <button disabled={(loadingState === LoadingState.LOADING_RECORDS)}  className=\"load-erc\" onClick={() => {\n                      onLoadTokenClicked()                      \n                    }}\n                  ><b>Load ERC721</b></button>\n                )}\n                {\n                  (!!(library) === false) && (\n                    <button className=\"connect-web3\"  onClick={() => {\n                      setActivatingConnector(injected);\n                      activate(injected);\n                    }}\n                  >Connect to Web3</button>                  \n                  )\n                }\n              </div>       \n\n\n              {\n                (loadingState !== LoadingState.UNLOADED) && (loadingState !== LoadingState.LOADING_RECORDS) && (isTokenOwner) &&\n                  (<div>\n                    <label><b>Dictation</b></label>                   \n                    <input disabled={(loadingState === LoadingState.SUBMITTING_DICTATION)} id=\"dictation\" placeholder=\"Let it be known...\"/>\n                    <div className=\"button-container\">\n                    \n                      <button disabled={(loadingState === LoadingState.SUBMITTING_DICTATION)} className=\"submit-dictation\" onClick={() => {\n                        if (checkValidDictation()) {\n                          setLoadingState(LoadingState.SUBMITTING_DICTATION)\n\n                          getGasPrice(submitDictation)\n                        }                        \n                      }}><b>Submit Dictation</b></button>\n\n                    </div>\n                  </div>\n                )\n              }\n\n              {\n                ((loadingState === LoadingState.LOADED) || (loadingState === LoadingState.SUBMITTING_DICTATION)) && createRecordList()\n              }\n            </div>        \n          </div>\n      <hr/>\n        <div className=\"padded-div\">\n          <label>v1.0.8 | <b><a href=\"https://github.com/conlan/nft-scribe\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></b> | <b><a href=\"https://etherscan.io/address/0xC207efACb12a126D382fA28460BB815F336D845f\" target=\"_blank\" rel=\"noopener noreferrer\">Contract</a></b> | <a href=\"https://chrome.google.com/webstore/detail/scribe-extension/fnegakfbbjdfcodbngocjeabbgdmpcad\" target=\"_blank\" rel=\"noopener noreferrer\"><b>Extension</b></a> | <b><a href=\"https://www.cryptovoxels.com/play?coords=S@279E,418N\" target=\"_blank\" rel=\"noopener noreferrer\">Cryptovoxels</a></b> | </label>\n          \n          <label>⛓{getNetworkName(chainId)}</label>     \n          <br/>\n          <label>Please use at your own risk and double check <a href=\"https://ethgasstation.info/\" target=\"_blank\" rel=\"noopener noreferrer\">gas price</a> before submitting transaction ⛽</label>               \n          <br/>\n          <label>Image and name metadata powered by <a href=\"https://opensea.io/\" target=\"_blank\" rel=\"noopener noreferrer\">OpenSea</a></label>\n          <br/>\n          <label><a href=\"https://giphy.com/stickers/geometric-heysp-illustrated-geometry-c6XT7hN1iSuUoNxD1b\" target=\"_blank\" rel=\"noopener noreferrer\">Loading GIF Source</a></label>          \n        </div>\n    </div>    \n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// Loading gif https://giphy.com/stickers/geometric-heysp-illustrated-geometry-c6XT7hN1iSuUoNxD1b","import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"./connectors\";\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && !active && !error && !suppress) {\n      const handleNetworkChanged = networkId => {\n        console.log(\"networkChanged\", networkId);\n        activate(injected);\n      };\n      const handleAccountsChanged = accounts => {\n        console.log(\"accountsChanged\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n\n      return () => {\n        ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n}\n"],"sourceRoot":""}